{"ast":null,"code":"// Mock data for Material Creation Application\n\nexport const materialTypes = [{\n  value: 'RAW',\n  label: 'Raw Material'\n}, {\n  value: 'SEMI',\n  label: 'Semi-Finished'\n}, {\n  value: 'FERT',\n  label: 'Finished Product'\n}, {\n  value: 'HALB',\n  label: 'Semi-Finished Product'\n}, {\n  value: 'ROH',\n  label: 'Raw Material'\n}, {\n  value: 'HIBE',\n  label: 'Operating Supplies'\n}];\nexport const industrySectors = [{\n  value: 'A',\n  label: 'Automotive'\n}, {\n  value: 'C',\n  label: 'Chemical'\n}, {\n  value: 'E',\n  label: 'Electronics'\n}, {\n  value: 'M',\n  label: 'Mechanical Engineering'\n}, {\n  value: 'P',\n  label: 'Pharmaceutical'\n}, {\n  value: 'T',\n  label: 'Textile'\n}];\nexport const plants = [{\n  value: '1000',\n  label: 'Plant 1000 - Main Production'\n}, {\n  value: '2000',\n  label: 'Plant 2000 - Assembly'\n}, {\n  value: '3000',\n  label: 'Plant 3000 - Warehouse'\n}];\nexport const storageLocations = [{\n  value: '0001',\n  label: 'Raw Materials Store'\n}, {\n  value: '0002',\n  label: 'Production Store'\n}, {\n  value: '0003',\n  label: 'Finished Goods Store'\n}];\nexport const baseUnits = [{\n  value: 'KG',\n  label: 'Kilogram'\n}, {\n  value: 'PC',\n  label: 'Piece'\n}, {\n  value: 'M',\n  label: 'Meter'\n}, {\n  value: 'L',\n  label: 'Liter'\n}, {\n  value: 'M2',\n  label: 'Square Meter'\n}, {\n  value: 'M3',\n  label: 'Cubic Meter'\n}];\nexport const valuationTypes = [{\n  value: 'V',\n  label: 'Moving Average'\n}, {\n  value: 'S',\n  label: 'Standard Price'\n}];\nexport const mrpTypes = [{\n  value: 'PD',\n  label: 'MRP'\n}, {\n  value: 'VV',\n  label: 'Forecast-Based Planning'\n}, {\n  value: 'VM',\n  label: 'Manual Reorder Point Planning'\n}];\nexport const availableViews = [{\n  id: 'basic1',\n  label: 'Basic Data 1',\n  category: 'basic'\n}, {\n  id: 'basic2',\n  label: 'Basic Data 2',\n  category: 'basic'\n}, {\n  id: 'classification',\n  label: 'Classification',\n  category: 'basic'\n}, {\n  id: 'sales1',\n  label: 'Sales: Sales Org. Data 1',\n  category: 'sales'\n}, {\n  id: 'sales2',\n  label: 'Sales: Sales Org. Data 2',\n  category: 'sales'\n}, {\n  id: 'salesGeneral',\n  label: 'Sales: General/Plant Data',\n  category: 'sales'\n}, {\n  id: 'purchasing',\n  label: 'Purchasing',\n  category: 'procurement'\n}, {\n  id: 'mrp1',\n  label: 'MRP 1',\n  category: 'planning'\n}, {\n  id: 'mrp2',\n  label: 'MRP 2',\n  category: 'planning'\n}, {\n  id: 'mrp3',\n  label: 'MRP 3',\n  category: 'planning'\n}, {\n  id: 'mrp4',\n  label: 'MRP 4',\n  category: 'planning'\n}, {\n  id: 'workScheduling',\n  label: 'Work Scheduling',\n  category: 'planning'\n}, {\n  id: 'plant',\n  label: 'Plant/Storage',\n  category: 'logistics'\n}, {\n  id: 'warehouse',\n  label: 'Warehouse Mgmt',\n  category: 'logistics'\n}];\nexport const mockMaterials = [{\n  id: '1',\n  materialNumber: 'MAT001001',\n  description: 'Steel Rod 10mm',\n  materialType: 'RAW',\n  industrySector: 'A',\n  baseUnit: 'KG',\n  plant: '1000',\n  storageLocation: '0001',\n  grossWeight: 15.5,\n  volume: 0.025,\n  status: 'active',\n  createdDate: '2024-01-15',\n  createdBy: 'System Admin'\n}, {\n  id: '2',\n  materialNumber: 'MAT002001',\n  description: 'Engine Block Semi-Finished',\n  materialType: 'SEMI',\n  industrySector: 'A',\n  baseUnit: 'PC',\n  plant: '2000',\n  storageLocation: '0002',\n  grossWeight: 45.2,\n  volume: 0.15,\n  status: 'active',\n  createdDate: '2024-01-16',\n  createdBy: 'Production Manager'\n}, {\n  id: '3',\n  materialNumber: 'MAT003001',\n  description: 'Complete Engine Assembly',\n  materialType: 'FERT',\n  industrySector: 'A',\n  baseUnit: 'PC',\n  plant: '2000',\n  storageLocation: '0003',\n  grossWeight: 125.8,\n  volume: 0.45,\n  status: 'active',\n  createdDate: '2024-01-17',\n  createdBy: 'Quality Manager'\n}];\n\n// Mock API functions\nexport const mockAPI = {\n  getMaterials: () => Promise.resolve(mockMaterials),\n  createMaterial: materialData => {\n    const newMaterial = {\n      id: Date.now().toString(),\n      materialNumber: `MAT${Date.now()}`,\n      ...materialData,\n      status: 'active',\n      createdDate: new Date().toISOString().split('T')[0],\n      createdBy: 'Current User'\n    };\n    mockMaterials.push(newMaterial);\n    return Promise.resolve(newMaterial);\n  },\n  updateMaterial: (id, materialData) => {\n    const index = mockMaterials.findIndex(m => m.id === id);\n    if (index !== -1) {\n      mockMaterials[index] = {\n        ...mockMaterials[index],\n        ...materialData\n      };\n      return Promise.resolve(mockMaterials[index]);\n    }\n    return Promise.reject(new Error('Material not found'));\n  },\n  deleteMaterial: id => {\n    const index = mockMaterials.findIndex(m => m.id === id);\n    if (index !== -1) {\n      mockMaterials.splice(index, 1);\n      return Promise.resolve();\n    }\n    return Promise.reject(new Error('Material not found'));\n  }\n};","map":{"version":3,"names":["materialTypes","value","label","industrySectors","plants","storageLocations","baseUnits","valuationTypes","mrpTypes","availableViews","id","category","mockMaterials","materialNumber","description","materialType","industrySector","baseUnit","plant","storageLocation","grossWeight","volume","status","createdDate","createdBy","mockAPI","getMaterials","Promise","resolve","createMaterial","materialData","newMaterial","Date","now","toString","toISOString","split","push","updateMaterial","index","findIndex","m","reject","Error","deleteMaterial","splice"],"sources":["C:/Users/mansa/vendor-material-merged/frontend/src/mock.js"],"sourcesContent":["// Mock data for Material Creation Application\r\n\r\nexport const materialTypes = [\r\n  { value: 'RAW', label: 'Raw Material' },\r\n  { value: 'SEMI', label: 'Semi-Finished' },\r\n  { value: 'FERT', label: 'Finished Product' },\r\n  { value: 'HALB', label: 'Semi-Finished Product' },\r\n  { value: 'ROH', label: 'Raw Material' },\r\n  { value: 'HIBE', label: 'Operating Supplies' }\r\n];\r\n\r\nexport const industrySectors = [\r\n  { value: 'A', label: 'Automotive' },\r\n  { value: 'C', label: 'Chemical' },\r\n  { value: 'E', label: 'Electronics' },\r\n  { value: 'M', label: 'Mechanical Engineering' },\r\n  { value: 'P', label: 'Pharmaceutical' },\r\n  { value: 'T', label: 'Textile' }\r\n];\r\n\r\nexport const plants = [\r\n  { value: '1000', label: 'Plant 1000 - Main Production' },\r\n  { value: '2000', label: 'Plant 2000 - Assembly' },\r\n  { value: '3000', label: 'Plant 3000 - Warehouse' }\r\n];\r\n\r\nexport const storageLocations = [\r\n  { value: '0001', label: 'Raw Materials Store' },\r\n  { value: '0002', label: 'Production Store' },\r\n  { value: '0003', label: 'Finished Goods Store' }\r\n];\r\n\r\nexport const baseUnits = [\r\n  { value: 'KG', label: 'Kilogram' },\r\n  { value: 'PC', label: 'Piece' },\r\n  { value: 'M', label: 'Meter' },\r\n  { value: 'L', label: 'Liter' },\r\n  { value: 'M2', label: 'Square Meter' },\r\n  { value: 'M3', label: 'Cubic Meter' }\r\n];\r\n\r\nexport const valuationTypes = [\r\n  { value: 'V', label: 'Moving Average' },\r\n  { value: 'S', label: 'Standard Price' }\r\n];\r\n\r\nexport const mrpTypes = [\r\n  { value: 'PD', label: 'MRP' },\r\n  { value: 'VV', label: 'Forecast-Based Planning' },\r\n  { value: 'VM', label: 'Manual Reorder Point Planning' }\r\n];\r\n\r\nexport const availableViews = [\r\n  { id: 'basic1', label: 'Basic Data 1', category: 'basic' },\r\n  { id: 'basic2', label: 'Basic Data 2', category: 'basic' },\r\n  { id: 'classification', label: 'Classification', category: 'basic' },\r\n  { id: 'sales1', label: 'Sales: Sales Org. Data 1', category: 'sales' },\r\n  { id: 'sales2', label: 'Sales: Sales Org. Data 2', category: 'sales' },\r\n  { id: 'salesGeneral', label: 'Sales: General/Plant Data', category: 'sales' },\r\n  { id: 'purchasing', label: 'Purchasing', category: 'procurement' },\r\n  { id: 'mrp1', label: 'MRP 1', category: 'planning' },\r\n  { id: 'mrp2', label: 'MRP 2', category: 'planning' },\r\n  { id: 'mrp3', label: 'MRP 3', category: 'planning' },\r\n  { id: 'mrp4', label: 'MRP 4', category: 'planning' },\r\n  { id: 'workScheduling', label: 'Work Scheduling', category: 'planning' },\r\n  { id: 'plant', label: 'Plant/Storage', category: 'logistics' },\r\n  { id: 'warehouse', label: 'Warehouse Mgmt', category: 'logistics' }\r\n];\r\n\r\nexport const mockMaterials = [\r\n  {\r\n    id: '1',\r\n    materialNumber: 'MAT001001',\r\n    description: 'Steel Rod 10mm',\r\n    materialType: 'RAW',\r\n    industrySector: 'A',\r\n    baseUnit: 'KG',\r\n    plant: '1000',\r\n    storageLocation: '0001',\r\n    grossWeight: 15.5,\r\n    volume: 0.025,\r\n    status: 'active',\r\n    createdDate: '2024-01-15',\r\n    createdBy: 'System Admin'\r\n  },\r\n  {\r\n    id: '2',\r\n    materialNumber: 'MAT002001',\r\n    description: 'Engine Block Semi-Finished',\r\n    materialType: 'SEMI',\r\n    industrySector: 'A',\r\n    baseUnit: 'PC',\r\n    plant: '2000',\r\n    storageLocation: '0002',\r\n    grossWeight: 45.2,\r\n    volume: 0.15,\r\n    status: 'active',\r\n    createdDate: '2024-01-16',\r\n    createdBy: 'Production Manager'\r\n  },\r\n  {\r\n    id: '3',\r\n    materialNumber: 'MAT003001',\r\n    description: 'Complete Engine Assembly',\r\n    materialType: 'FERT',\r\n    industrySector: 'A',\r\n    baseUnit: 'PC',\r\n    plant: '2000',\r\n    storageLocation: '0003',\r\n    grossWeight: 125.8,\r\n    volume: 0.45,\r\n    status: 'active',\r\n    createdDate: '2024-01-17',\r\n    createdBy: 'Quality Manager'\r\n  }\r\n];\r\n\r\n// Mock API functions\r\nexport const mockAPI = {\r\n  getMaterials: () => Promise.resolve(mockMaterials),\r\n  \r\n  createMaterial: (materialData) => {\r\n    const newMaterial = {\r\n      id: Date.now().toString(),\r\n      materialNumber: `MAT${Date.now()}`,\r\n      ...materialData,\r\n      status: 'active',\r\n      createdDate: new Date().toISOString().split('T')[0],\r\n      createdBy: 'Current User'\r\n    };\r\n    mockMaterials.push(newMaterial);\r\n    return Promise.resolve(newMaterial);\r\n  },\r\n  \r\n  updateMaterial: (id, materialData) => {\r\n    const index = mockMaterials.findIndex(m => m.id === id);\r\n    if (index !== -1) {\r\n      mockMaterials[index] = { ...mockMaterials[index], ...materialData };\r\n      return Promise.resolve(mockMaterials[index]);\r\n    }\r\n    return Promise.reject(new Error('Material not found'));\r\n  },\r\n  \r\n  deleteMaterial: (id) => {\r\n    const index = mockMaterials.findIndex(m => m.id === id);\r\n    if (index !== -1) {\r\n      mockMaterials.splice(index, 1);\r\n      return Promise.resolve();\r\n    }\r\n    return Promise.reject(new Error('Material not found'));\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}